// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by https://gridui.robotikabrno.cz/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":21335,"type":"Slider","state":{"id":"brightness","x":0,"y":0.5,"w":12,"h":1,"tab":0,"css":{},"color":"#e5a50a","fontSize":16,"min":0,"max":31,"value":3,"precision":1,"showValue":true}},{"uuid":17479,"type":"Text","state":{"id":"Text1","x":4.5,"y":0,"w":3,"h":0.5,"tab":0,"css":{},"text":"Brightness","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":56169,"type":"Slider","state":{"id":"rainbowSpeed","x":0.5,"y":6,"w":11,"h":1,"tab":0,"css":{},"color":"#008000","fontSize":16,"min":1,"max":1000,"value":50,"precision":1,"showValue":true}},{"uuid":4320,"type":"Slider","state":{"id":"rainbowLength","x":0.5,"y":8.5,"w":11,"h":1,"tab":0,"css":{},"color":"#1a5fb4","fontSize":16,"min":1,"max":50,"value":1,"precision":1,"showValue":true}},{"uuid":1631,"type":"Checkbox","state":{"id":"modeHsv","x":3,"y":2.5,"w":2.5,"h":1,"tab":0,"css":{},"fontSize":14,"checked":false,"color":"#000000","text":"HSV"}},{"uuid":302,"type":"Checkbox","state":{"id":"modeRainbow","x":6,"y":2.5,"w":2.5,"h":1,"tab":0,"css":{},"fontSize":14,"checked":false,"color":"#000000","text":"Rainbow"}},{"uuid":10021,"type":"Checkbox","state":{"id":"modeRgb","x":0,"y":2.5,"w":2.5,"h":1,"tab":0,"css":{},"fontSize":14,"checked":false,"color":"#000000","text":"RGB"}},{"uuid":25505,"type":"Slider","state":{"id":"rgbR","x":0.5,"y":6,"w":11,"h":1,"tab":0,"css":{},"color":"#e01b24","fontSize":16,"min":0,"max":255,"value":0,"precision":1,"showValue":true}},{"uuid":3502,"type":"Slider","state":{"id":"rgbG","x":0.5,"y":8,"w":11,"h":1,"tab":0,"css":{},"color":"#008000","fontSize":16,"min":0,"max":255,"value":0,"precision":1,"showValue":true}},{"uuid":42967,"type":"Slider","state":{"id":"rgbB","x":0.5,"y":10,"w":11,"h":1,"tab":0,"css":{},"color":"#1a5fb4","fontSize":16,"min":0,"max":255,"value":0,"precision":1,"showValue":true}},{"uuid":2111,"type":"Slider","state":{"id":"hsvH","x":0.5,"y":6,"w":11,"h":1,"tab":0,"css":{},"color":"#e01b24","fontSize":16,"min":0,"max":255,"value":0,"precision":1,"showValue":true}},{"uuid":131,"type":"Slider","state":{"id":"hsvS","x":0.5,"y":8,"w":11,"h":1,"tab":0,"css":{},"color":"#008000","fontSize":16,"min":0,"max":255,"value":0,"precision":1,"showValue":true}},{"uuid":64101,"type":"Slider","state":{"id":"hsvV","x":0.5,"y":10,"w":11,"h":1,"tab":0,"css":{},"color":"#1a5fb4","fontSize":16,"min":0,"max":255,"value":0,"precision":1,"showValue":true}},{"uuid":58968,"type":"Text","state":{"id":"rgbRtit","x":4.5,"y":5.5,"w":3,"h":0.5,"tab":0,"css":{},"text":"Red","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":46279,"type":"Text","state":{"id":"rgbGtit","x":4.5,"y":7.5,"w":3,"h":0.5,"tab":0,"css":{},"text":"Green","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":6578,"type":"Text","state":{"id":"rgbBtit","x":4.5,"y":9.5,"w":3,"h":0.5,"tab":0,"css":{},"text":"Blue","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":53329,"type":"Text","state":{"id":"hsvHtit","x":4.5,"y":5.5,"w":3,"h":0.5,"tab":0,"css":{},"text":"Hue","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":41043,"type":"Text","state":{"id":"hsvStit","x":4.5,"y":7.5,"w":3,"h":0.5,"tab":0,"css":{},"text":"Saturation","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":41549,"type":"Text","state":{"id":"hsvVtit","x":4.5,"y":9.5,"w":3,"h":0.5,"tab":0,"css":{},"text":"Value","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":11105,"type":"Text","state":{"id":"rainbowLengthTit","x":4.5,"y":7.5,"w":3,"h":0.5,"tab":0,"css":{},"text":"Section length","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":38391,"type":"Text","state":{"id":"rainbowSpeedTitle","x":4.5,"y":5.5,"w":3,"h":0.5,"tab":0,"css":{},"text":"Iteration delay (ms)","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

#ifndef RB_GRIDUI_VERSION
#define RB_GRIDUI_VERSION 0x040000
#endif

static_assert(RB_GRIDUI_VERSION >= 0x040000,
    "Your RBGridUi library version is too low for this layout, please update to 040000.");

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        brightness(
            UI.slider(0, 0.5, 12, 1, 21335)
                .color("#e5a50a")
                .max(31)
                .value(3)
        ),
        Text1(
            UI.text(4.5, 0, 3, 0.5, 17479)
                .text("Brightness")
        ),
        rainbowSpeed(
            UI.slider(0.5, 6, 11, 1, 56169)
                .min(1)
                .max(1000)
                .value(50)
        ),
        rainbowLength(
            UI.slider(0.5, 8.5, 11, 1, 4320)
                .color("#1a5fb4")
                .min(1)
                .max(50)
                .value(1)
        ),
        modeHsv(
            UI.checkbox(3, 2.5, 2.5, 1, 1631)
                .text("HSV")
        ),
        modeRainbow(
            UI.checkbox(6, 2.5, 2.5, 1, 302)
                .text("Rainbow")
        ),
        modeRgb(
            UI.checkbox(0, 2.5, 2.5, 1, 10021)
                .text("RGB")
        ),
        rgbR(
            UI.slider(0.5, 6, 11, 1, 25505)
                .color("#e01b24")
                .max(255)
        ),
        rgbG(
            UI.slider(0.5, 8, 11, 1, 3502)
                .max(255)
        ),
        rgbB(
            UI.slider(0.5, 10, 11, 1, 42967)
                .color("#1a5fb4")
                .max(255)
        ),
        hsvH(
            UI.slider(0.5, 6, 11, 1, 2111)
                .color("#e01b24")
                .max(255)
        ),
        hsvS(
            UI.slider(0.5, 8, 11, 1, 131)
                .max(255)
        ),
        hsvV(
            UI.slider(0.5, 10, 11, 1, 64101)
                .color("#1a5fb4")
                .max(255)
        ),
        rgbRtit(
            UI.text(4.5, 5.5, 3, 0.5, 58968)
                .text("Red")
        ),
        rgbGtit(
            UI.text(4.5, 7.5, 3, 0.5, 46279)
                .text("Green")
        ),
        rgbBtit(
            UI.text(4.5, 9.5, 3, 0.5, 6578)
                .text("Blue")
        ),
        hsvHtit(
            UI.text(4.5, 5.5, 3, 0.5, 53329)
                .text("Hue")
        ),
        hsvStit(
            UI.text(4.5, 7.5, 3, 0.5, 41043)
                .text("Saturation")
        ),
        hsvVtit(
            UI.text(4.5, 9.5, 3, 0.5, 41549)
                .text("Value")
        ),
        rainbowLengthTit(
            UI.text(4.5, 7.5, 3, 0.5, 11105)
                .text("Section length")
        ),
        rainbowSpeedTitle(
            UI.text(4.5, 5.5, 3, 0.5, 38391)
                .text("Iteration delay (ms)")
        )
    {
    }

public:
    void commit();

    Slider& brightness;
    Text& Text1;
    Slider& rainbowSpeed;
    Slider& rainbowLength;
    Checkbox& modeHsv;
    Checkbox& modeRainbow;
    Checkbox& modeRgb;
    Slider& rgbR;
    Slider& rgbG;
    Slider& rgbB;
    Slider& hsvH;
    Slider& hsvS;
    Slider& hsvV;
    Text& rgbRtit;
    Text& rgbGtit;
    Text& rgbBtit;
    Text& hsvHtit;
    Text& hsvStit;
    Text& hsvVtit;
    Text& rainbowLengthTit;
    Text& rainbowSpeedTitle;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}

    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    void changeTab (uint16_t index) {
        UI.changeTab(index);
    }

    Slider brightness;
    Text Text1;
    Slider rainbowSpeed;
    Slider rainbowLength;
    Checkbox modeHsv;
    Checkbox modeRainbow;
    Checkbox modeRgb;
    Slider rgbR;
    Slider rgbG;
    Slider rgbB;
    Slider hsvH;
    Slider hsvS;
    Slider hsvV;
    Text rgbRtit;
    Text rgbGtit;
    Text rgbBtit;
    Text hsvHtit;
    Text hsvStit;
    Text hsvVtit;
    Text rainbowLengthTit;
    Text rainbowSpeedTitle;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.brightness = brightness.finish();
    Layout.Text1 = Text1.finish();
    Layout.rainbowSpeed = rainbowSpeed.finish();
    Layout.rainbowLength = rainbowLength.finish();
    Layout.modeHsv = modeHsv.finish();
    Layout.modeRainbow = modeRainbow.finish();
    Layout.modeRgb = modeRgb.finish();
    Layout.rgbR = rgbR.finish();
    Layout.rgbG = rgbG.finish();
    Layout.rgbB = rgbB.finish();
    Layout.hsvH = hsvH.finish();
    Layout.hsvS = hsvS.finish();
    Layout.hsvV = hsvV.finish();
    Layout.rgbRtit = rgbRtit.finish();
    Layout.rgbGtit = rgbGtit.finish();
    Layout.rgbBtit = rgbBtit.finish();
    Layout.hsvHtit = hsvHtit.finish();
    Layout.hsvStit = hsvStit.finish();
    Layout.hsvVtit = hsvVtit.finish();
    Layout.rainbowLengthTit = rainbowLengthTit.finish();
    Layout.rainbowSpeedTitle = rainbowSpeedTitle.finish();
    UI.commit();
}

};

};
